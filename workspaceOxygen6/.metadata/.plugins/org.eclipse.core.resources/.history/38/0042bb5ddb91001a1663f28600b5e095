package com.asima.secureApp.filters;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.asima.secureApp.models.AuthenticationRequest;
import com.asima.secureApp.services.MyUserDetailsService;
import com.asima.secureApp.util.jwtUtil;

@Component
public class JwtRequestFilter extends OncePerRequestFilter {

	@Autowired
	MyUserDetailsService userdDetailsService;
	@Autowired
	AuthenticationRequest authenticationRequest;
	
	@Autowired
	jwtUtil jwtTokenUtil;
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		String jwt=null;
		String username = null;
		String header = request.getHeader("Authorization");
//		final UserDetails userDetails = userdDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		if ((header != null) && (header.startsWith("Bearer"))) {

			jwt = header.substring(7);
			username = jwtTokenUtil.extractUsername(jwt);
			//if SecurityContextHolder has not been set so far
			if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
				UserDetails userDetails = userdDetailsService.loadUserByUsername(username);

				if (jwtTokenUtil.validateToken(jwt, userDetails)) {
					// creating the object
					UsernamePasswordAuthenticationToken userNamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(
							userDetails, null, userDetails.getAuthorities());
					//the default spring authentication token is being replaced by jwt. We are taking this over and setting it manually in case 
					
					userNamePasswordAuthenticationToken
							.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
					SecurityContextHolder.getContext().setAuthentication(userNamePasswordAuthenticationToken);
					filterChain.doFilter(request, response);

				}
			}

		}
		 
		
		
		
		
		
		
	final UserDetails userDetails = userdDetailsService.loadUserByUsername(authenticationRequest.getUsername());
		
		
		
	}

}
